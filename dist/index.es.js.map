{"version":3,"file":"index.es.js","sources":["../src/useWhizFlow.ts","../src/index.tsx","../src/WhizFlow.tsx"],"sourcesContent":["// src/useWhizFlow.ts\nimport { useState } from 'react';\nimport { Step, Answers } from './types';\n\nexport const useWhizFlow = (workflow: Step[], onComplete: (answers: Answers) => void) => {\n  const [currentStep, setCurrentStep] = useState<number>(0);\n  const [answers, setAnswers] = useState<Answers>({});\n\n  const step = workflow[currentStep];\n\n  const handleNext = () => {\n    const result = step.next(answers);\n\n    const nextStepId = typeof result === 'string' ? result : result.nextStepId;\n    const updatedAnswers = typeof result !== 'string' && result.updatedAnswers ? result.updatedAnswers : answers;\n\n    if (nextStepId === 'done') {\n      onComplete(updatedAnswers);\n    } else {\n      setAnswers(updatedAnswers);\n      const nextStepIndex = workflow.findIndex((step) => step.id === nextStepId);\n\n      if (nextStepIndex === -1) {\n        console.error(`Error: Non-existent step \"${nextStepId}\"`);\n        return;\n      }\n\n      setCurrentStep(nextStepIndex);\n    }\n  };\n\n  return {\n    step,\n    answers,\n    setAnswers,\n    handleNext,\n  };\n};\n","import {WhizFlow} from 'WhizFlow';\n\nexport default {WhizFlow};\n","import React from 'react';\nimport { WhizFlowProps } from './types';\nimport { useWhizFlow } from './useWhizFlow';\n\nexport const WhizFlow: React.FC<WhizFlowProps> = ({\n  workflow,\n  questionTypes,\n  children,\n  onComplete,\n}) => {\n  const defaultOnComplete = () => {};\n  const { step, answers, setAnswers, handleNext } = useWhizFlow(\n    workflow,\n    onComplete ?? defaultOnComplete\n  );\n\n  const renderQuestion = (questionId: string) => {\n    const question = step.questions.find((q) => q.id === questionId);\n\n    if (!question) {\n      console.error(`Question with ID \"${questionId}\" not found.`);\n      return null;\n    }\n\n    if (!questionTypes) {\n      console.error(`No question types defined.`);\n      return null;\n    }\n\n    const renderFunc = questionTypes[question.inputType];\n\n    if (!renderFunc) {\n      console.error(\n        `Question type \"${question.inputType}\" not found in the provided questionTypes.`\n      );\n      return null;\n    }\n\n    return renderFunc(question, answers, setAnswers);\n  };\n\n  return children({ step, answers, setAnswers, handleNext, renderQuestion });\n};\n"],"names":["index","WhizFlow","_a","workflow","questionTypes","children","onComplete","_b","useState","currentStep","setCurrentStep","answers","setAnswers","step","handleNext","result","next","nextStepId","updatedAnswers","nextStepIndex","findIndex","id","console","error","useWhizFlow","renderQuestion","questionId","question","questions","find","q","renderFunc","inputType","concat"],"mappings":"iCAIO,ICFPA,EAAe,CAACC,SCEiC,SAACC,OAChDC,EAAQD,EAAAC,SACRC,EAAaF,EAAAE,cACbC,EAAQH,EAAAG,SACRC,EAAUJ,EAAAI,WAGJC,EFPmB,SAACJ,EAAkBG,GACtC,IAAAJ,EAAgCM,EAAiB,GAAhDC,EAAWP,EAAA,GAAEQ,EAAcR,EAAA,GAC5BK,EAAwBC,EAAkB,CAAE,GAA3CG,EAAOJ,EAAA,GAAEK,EAAUL,EAAA,GAEpBM,EAAOV,EAASM,GAuBtB,MAAO,CACLI,KAAIA,EACJF,QAAOA,EACPC,WAAUA,EACVE,WAzBiB,WACjB,IAAMC,EAASF,EAAKG,KAAKL,GAEnBM,EAA+B,iBAAXF,EAAsBA,EAASA,EAAOE,WAC1DC,EAAmC,iBAAXH,GAAuBA,EAAOG,eAAiBH,EAAOG,eAAiBP,EAErG,GAAmB,SAAfM,EACFX,EAAWY,OACN,CACLN,EAAWM,GACX,IAAMC,EAAgBhB,EAASiB,WAAU,SAACP,GAAS,OAAAA,EAAKQ,KAAOJ,CAAZ,IAEnD,IAAuB,IAAnBE,EAEF,YADAG,QAAQC,MAAM,oCAA6BN,EAAU,MAIvDP,EAAeS,EAChB,CACH,EAQF,CE1BoDK,CAChDrB,EACAG,QAAAA,EAHwB,cAClBO,EAAIN,EAAAM,KAAEF,EAAOJ,EAAAI,QAAEC,EAAUL,EAAAK,WAAEE,EAAUP,EAAAO,WA8B7C,OAAOT,EAAS,CAAEQ,KAAIA,EAAEF,QAAOA,EAAEC,WAAUA,EAAEE,WAAUA,EAAEW,eAzBlC,SAACC,GACtB,IAAMC,EAAWd,EAAKe,UAAUC,MAAK,SAACC,GAAM,OAAAA,EAAET,KAAOK,CAAU,IAE/D,IAAKC,EAEH,OADAL,QAAQC,MAAM,4BAAqBG,EAAU,iBACtC,KAGT,IAAKtB,EAEH,OADAkB,QAAQC,MAAM,8BACP,KAGT,IAAMQ,EAAa3B,EAAcuB,EAASK,WAE1C,OAAKD,EAOEA,EAAWJ,EAAUhB,EAASC,IANnCU,QAAQC,MACN,kBAAAU,OAAkBN,EAASK,UAAqD,+CAE3E,KAIX,GAGF"}