{"version":3,"file":"index.min.js","sources":["../src/WhizFlow.tsx","../src/useWhizFlow.ts"],"sourcesContent":["import React from 'react';\nimport { WhizFlowProps } from './types';\nimport { useWhizFlow } from './useWhizFlow';\n\nexport const WhizFlow: React.FC<WhizFlowProps> = ({\n  workflow,\n  questionTypes,\n  children,\n  onComplete,\n}) => {\n  const defaultOnComplete = () => {};\n  const { step, answers, setAnswers, handleNext, handlePrev, loading } =\n    useWhizFlow(workflow, onComplete ?? defaultOnComplete);\n\n  const renderQuestion = (questionId: string) => {\n    const question = step.questions.find((q) => q.id === questionId);\n\n    if (!question) {\n      console.error(`Question with ID \"${questionId}\" not found.`);\n      return null;\n    }\n\n    if (!questionTypes) {\n      console.error(`No question types defined.`);\n      return null;\n    }\n\n    const renderFunc = questionTypes[question.inputType];\n\n    if (!renderFunc) {\n      console.error(\n        `Question type \"${question.inputType}\" not found in the provided questionTypes.`\n      );\n      return null;\n    }\n\n    return renderFunc(question, answers, setAnswers);\n  };\n\n  return children({\n    step,\n    answers,\n    loading,\n    setAnswers,\n    handleNext,\n    renderQuestion,\n    handlePrev,\n  });\n};\n","// src/useWhizFlow.ts\nimport { useState } from 'react';\nimport { Step, Answers } from './types';\n\nexport const useWhizFlow = (\n  workflow: Step[],\n  onComplete: (answers: Answers) => void\n) => {\n  const [currentStep, setCurrentStep] = useState<number>(0);\n  const [answers, setAnswers] = useState<Answers>({});\n  const [loading, setLoading] = useState<boolean>(false);\n  const [trail, setTrail] = useState<number[]>([]);\n\n  const step = workflow[currentStep];\n\n  const handlePrev = async () => {\n    const prevStep = trail.pop();\n    if (prevStep !== undefined && prevStep >= 0) {\n      setTrail([...trail]);\n      setCurrentStep(prevStep);\n    }\n  };\n\n  const handleNext = async (submitterAnswers?: Answers) => {\n    const currAnswers = submitterAnswers ?? answers;\n    const result = step.next(currAnswers);\n\n    let nextStepId = '';\n    let updatedAnswers = currAnswers;\n    if (typeof result === 'string') {\n      nextStepId = result;\n      updatedAnswers = currAnswers;\n    } else if (typeof (result as Promise<any>)?.then === 'function') {\n      try {\n        setLoading(true);\n        const awaitedResult = await result;\n        setLoading(false);\n        if (typeof awaitedResult === 'string') {\n          nextStepId = awaitedResult;\n        } else {\n          nextStepId = awaitedResult.nextStepId;\n          updatedAnswers = awaitedResult.updatedAnswers ?? currAnswers;\n        }\n      } catch (ex) {\n        console.error(`Error: Next step eval failed \"${ex}\"`);\n        return;\n      }\n    } else if ((result as any)?.nextStepId) {\n      nextStepId = (result as any).nextStepId;\n      updatedAnswers = (result as any).updatedAnswers ?? currAnswers;\n    }\n\n    if (nextStepId === 'done') {\n      onComplete(updatedAnswers);\n    } else {\n      setAnswers(updatedAnswers);\n      const nextStepIndex = workflow.findIndex(\n        (step) => step.id === nextStepId\n      );\n\n      if (nextStepIndex === -1) {\n        console.error(`Error: Non-existent step \"${nextStepId}\"`);\n        return;\n      }\n\n      setTrail([...trail, currentStep]);\n      setCurrentStep(nextStepIndex);\n    }\n  };\n\n  return {\n    step,\n    answers,\n    loading,\n    setAnswers,\n    handleNext,\n    handlePrev,\n  };\n};\n"],"names":["_a","workflow","questionTypes","children","onComplete","_b","useState","currentStep","setCurrentStep","answers","setAnswers","_c","loading","setLoading","_d","trail","setTrail","step","handleNext","submitterAnswers","__awaiter","currAnswers","result","next","nextStepId","updatedAnswers","then","awaitedResult","sent","console","error","ex_1","nextStepIndex","findIndex","id","__spreadArray","handlePrev","undefined","prevStep","pop","useWhizFlow","renderQuestion","questionId","question","questions","find","q","renderFunc","inputType","concat"],"mappings":"olDAIiD,SAACA,OAChDC,EAAQD,EAAAC,SACRC,EAAaF,EAAAE,cACbC,EAAQH,EAAAG,SACRC,EAAUJ,EAAAI,WAGJC,ECPmB,SACzBJ,EACAG,GAEM,IAAAJ,EAAgCM,EAAAA,SAAiB,GAAhDC,EAAWP,EAAA,GAAEQ,EAAcR,EAAA,GAC5BK,EAAwBC,EAAAA,SAAkB,CAAE,GAA3CG,EAAOJ,EAAA,GAAEK,EAAUL,EAAA,GACpBM,EAAwBL,EAAAA,UAAkB,GAAzCM,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GACpBG,EAAoBR,EAAAA,SAAmB,IAAtCS,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAEhBG,EAAOhB,EAASM,GAyDtB,MAAO,CACLU,KAAIA,EACJR,QAAOA,EACPG,QAAOA,EACPF,WAAUA,EACVQ,WApDiB,SAAOC,GAA0B,OAAAC,OAAA,OAAA,OAAA,GAAA,mFAM9C,OALEC,EAAcF,QAAAA,EAAoBV,EAClCa,EAASL,EAAKM,KAAKF,GAErBG,EAAa,GACbC,EAAiBJ,EACC,iBAAXC,EAAmB,CAAA,EAAA,IAC5BE,EAAaF,EACbG,EAAiBJ,gBACR,GAA0C,mBAAlCC,aAAA,EAAAA,EAAyBI,MAAjC,MAAoD,CAAA,EAAA,oBAGrC,6BADtBb,GAAW,GACW,CAAA,EAAMS,iBAAtBK,EAAgBhB,EAAYiB,OAClCf,GAAW,GACkB,iBAAlBc,EACTH,EAAaG,GAEbH,EAAaG,EAAcH,WAC3BC,EAA6C,QAA5BzB,EAAA2B,EAAcF,sBAAc,IAAAzB,EAAAA,EAAIqB,gBAInD,kBADAQ,QAAQC,MAAM,wCAAiCC,EAAE,MAC1C,CAAA,8BAECT,eAAAA,EAAgBE,cAC1BA,EAAcF,EAAeE,WAC7BC,EAA+C,QAA7BpB,EAAAiB,EAAeG,sBAAc,IAAApB,EAAAA,EAAIgB,oBAGrD,GAAmB,SAAfG,EACFpB,EAAWqB,OACN,CAML,GALAf,EAAWe,GACLO,EAAgB/B,EAASgC,WAC7B,SAAChB,GAAS,OAAAA,EAAKiB,KAAOV,CAAZ,KAGW,IAAnBQ,EAEF,OADAH,QAAQC,MAAM,oCAA6BN,EAAU,MAC9C,CAAA,GAGTR,EAAamB,EAAAA,EAAA,GAAApB,GAAO,GAAA,CAAAR,QACpBC,EAAewB,EAChB,mBASDI,WA7DiB,WAAA,OAAAhB,OAAA,OAAA,OAAA,GAAA,wDAEAiB,KADXC,EAAWvB,EAAMwB,QACOD,GAAY,IACxCtB,EAAQmB,EAAA,GAAKpB,GAAK,IAClBP,EAAe8B,eA2DrB,CDlEIE,CAAYvC,EAAUG,QAAAA,EAFE,cAClBa,EAAIZ,EAAAY,KAAER,EAAOJ,EAAAI,QAAEC,eAAYQ,EAAUb,EAAAa,WAAEkB,EAAU/B,EAAA+B,WAAExB,YA4B3D,OAAOT,EAAS,CACdc,KAAIA,EACJR,QAAOA,EACPG,QAAOA,EACPF,WAAUA,EACVQ,WAAUA,EACVuB,eA/BqB,SAACC,GACtB,IAAMC,EAAW1B,EAAK2B,UAAUC,MAAK,SAACC,GAAM,OAAAA,EAAEZ,KAAOQ,CAAU,IAE/D,IAAKC,EAEH,OADAd,QAAQC,MAAM,4BAAqBY,EAAU,iBACtC,KAGT,IAAKxC,EAEH,OADA2B,QAAQC,MAAM,8BACP,KAGT,IAAMiB,EAAa7C,EAAcyC,EAASK,WAE1C,OAAKD,EAOEA,EAAWJ,EAAUlC,EAASC,IANnCmB,QAAQC,MACN,kBAAAmB,OAAkBN,EAASK,UAAqD,+CAE3E,KAIX,EASEZ,WAAUA,GAEd"}